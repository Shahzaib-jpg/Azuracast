# WARNING! This file is automatically generated by AzuraCast.
# Do not update it directly!


init.daemon.set(false)
init.daemon.pidfile.path.set("/var/azuracast/stations/myclient/config/liquidsoap.pid")
log.stdout.set(true)
log.file.set(false)
settings.server.log.level.set(4)
settings.server.telnet.set(true)
settings.server.telnet.bind_addr.set("127.0.0.1")
settings.server.telnet.port.set(8004)
settings.harbor.bind_addrs.set(["0.0.0.0"])

settings.tag.encodings.set(["UTF-8","ISO-8859-1"])
settings.encoder.metadata.export.set(["artist","title","album","song"])

setenv("TZ", "UTC")

autodj_is_loading = ref(true)
ignore(autodj_is_loading)

autodj_ping_attempts = ref(0)
ignore(autodj_ping_attempts)

# Track live-enabled status script-wide for fades.
live_enabled = ref(false)
ignore(live_enabled)

azuracast_api_url = "http://127.0.0.1/api/internal/1"
azuracast_api_key = "b0cfdb22131fc3da265b21036f23e719eb0feda653be077449c0ac8ee77d61564864e86b314df7a6038c939b036858c02db3"

def azuracast_api_call(~timeout=2, url, payload) =
    full_url = "#{azuracast_api_url}/#{url}"
    
    log("API #{url} - Sending POST request to '#{full_url}' with body: #{payload}")
    try
        response = http.post(full_url,
            headers=[
                ("Content-Type", "application/json"),
                ("User-Agent", "Liquidsoap AzuraCast"),
                ("X-Liquidsoap-Api-Key", "#{azuracast_api_key}")
            ],
            timeout=timeout,
            data=payload
        )
        
        log("API #{url} - Response (#{response.status_code}): #{response}")
        {success = response.status_code == 200, data = "#{response}"}
    catch err do
        log("API #{url} - Error: #{error.kind(err)} - #{error.message(err)}")
        {success = false, data = ""}
    end
end

playlist_default = playlist(id="playlist_default",mime_type="audio/x-mpegurl",mode="randomize",reload_mode="watch","/var/azuracast/stations/myclient/playlists/playlist_default.m3u")
playlist_default = cue_cut(id="cue_playlist_default", playlist_default)

# Standard Playlists
radio = random(id="standard_playlists", weights=[3], [playlist_default])

# AutoDJ Next Song Script
def autodj_next_song() =
    response = azuracast_api_call(
        "nextsong",
        ""
    )
    if (response.success != true) or (response.data == "") or (string.match(pattern="Error", response.data)) then
        null()
    else
        r = request.create(response.data)
        if request.resolve(r) then
            r
        else
            null()
       end
    end
end

# Delayed ping for AutoDJ Next Song
def wait_for_next_song(autodj)
    autodj_ping_attempts := !autodj_ping_attempts + 1
    
    if source.is_ready(autodj) then
        log("AutoDJ is ready!")
        autodj_is_loading := false
        -1.0
    elsif !autodj_ping_attempts > 200 then
        log("AutoDJ could not be initialized within the specified timeout.")
        autodj_is_loading := false
        -1.0
    else
        0.5
    end
end

dynamic = request.dynamic(id="next_song", timeout=20., retry_delay=2., autodj_next_song)
dynamic = cue_cut(id="cue_next_song", dynamic)

dynamic_startup = fallback(
    id = "dynamic_startup",
    track_sensitive = false,
    [
        dynamic,
        source.available(
            blank(id = "autodj_startup_blank", duration = 120.),
            predicate.activates({!autodj_is_loading})
        )
    ]
)
radio = fallback(id="autodj_fallback", track_sensitive = true, [dynamic_startup, radio])

ref_dynamic = ref(dynamic);
thread.run.recurrent(delay=0.25, { wait_for_next_song(!ref_dynamic) })

requests = request.queue(id="requests")
requests = cue_cut(id="cue_requests", requests)

radio = fallback(id="requests_fallback", track_sensitive = true, [requests, radio])
add_skip_command(radio)

radio = crossfade(smart=false, duration=3.00, fade_out=2.00, fade_in=2.00, radio)

# DJ Authentication
last_authenticated_dj = ref("")
live_dj = ref("")

live_record_path = ref("")

def dj_auth(login) =
    auth_info =
        if (login.user == "source" or login.user == "") and (string.match(pattern="(:|,)+", login.password)) then
            auth_string = string.split(separator="(:|,)", login.password)
            {user = list.nth(default="", auth_string, 0),
            password = list.nth(default="", auth_string, 2)}
        else
            {user = login.user, password = login.password}
        end
    
    response = azuracast_api_call(
        timeout=5,
        "auth",
        json.stringify(auth_info)
    )
    if response.success then
        last_authenticated_dj := auth_info.user
        true
    else
        false
    end
end

def live_connected(header) =
    dj = !last_authenticated_dj
    log("DJ Source connected! Last authenticated DJ: #{dj} - #{header}")

    live_enabled := true
    live_dj := dj
    
    j = json()
    j.add("user", dj)
    
    response = azuracast_api_call(
        timeout=5,
        "djon",
        json.stringify(j)
    )
    if response.success and string.contains(prefix="/", response.data) then
        live_record_path := response.data
    end
end

def live_disconnected() =
    dj = !live_dj
    
    j = json()
    j.add("user", dj)
    
    _ = azuracast_api_call(
        timeout=5,
        "djoff",
        json.stringify(j)
    )
    
    live_enabled := false
    last_authenticated_dj := ""
    live_dj := ""
    
    live_record_path := ""
end

# A Pre-DJ source of radio that can be broadcast if needed',
radio_without_live = radio
ignore(radio_without_live)

# Live Broadcasting
live = input.harbor("/", id = "input_streamer", port = 8005, auth = dj_auth, icy = true, icy_metadata_charset = "UTF-8", metadata_charset = "UTF-8", on_connect = live_connected, on_disconnect = live_disconnected, buffer = 5.00, max = 10.00)

def insert_missing(m) =
    if m == [] then
        [("title", "Live Broadcast")]
    else
        m
    end
end
live = map_metadata(insert_missing, live)

radio = fallback(id="live_fallback", replay_metadata=true, track_sensitive=false, [live, radio])

# Allow for Telnet-driven insertion of custom metadata.
radio = server.insert_metadata(id="custom_metadata", radio)

# Apply amplification metadata (if supplied)
radio = amplify(override="liq_amplify", 1., radio)

radio = fallback(id="safe_fallback", track_sensitive = false, [radio, single(id="error_jingle", "/usr/local/share/icecast/web/error.mp3")])

# Handle "Jingle Mode" tracks by replaying the previous metadata.
last_title = ref("")
last_artist = ref("")

def handle_jingle_mode(m) = 
    if (m["jingle_mode"] == "true") then
        [("title", !last_title), ("artist", !last_artist)]                
    else
        last_title := m["title"]
        last_artist := m["artist"]
        m
    end
end
radio = map_metadata(handle_jingle_mode, radio)

# Send metadata changes back to AzuraCast
def metadata_updated(m) =
    def f() =
        if (m["song_id"] != "") then
            j = json()
            j.add("song_id", m["song_id"])
            j.add("media_id", m["media_id"])
            j.add("playlist_id", m["playlist_id"])
        
            _ = azuracast_api_call(
                "feedback",
                json.stringify(j)
            )
        end
    end
    
    thread.run(f)
end

radio.on_metadata(metadata_updated)

# Local Broadcasts
output.icecast(%mp3(samplerate=44100, stereo=true, bitrate=128, id3v2=true), id="local_1", host = "127.0.0.1", port = 8000, password = "TNELmXwY", mount = "/radio.mp3", name = "Myclient", description = "", genre = "", public = false, encoding = "UTF-8", radio)

# Remote Relays