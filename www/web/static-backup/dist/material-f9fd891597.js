!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("jquery")):"function"==typeof define&&define.amd?define(["exports","jquery"],t):t(e.material={},e.jQuery)}(this,function(e,t){"use strict";!function(t){var e=".bs.collapse",n="show",i="show-predecessor",o="hide"+e,r="show"+e,s=".expansion-panel",e=".expansion-panel .collapse";t(document).on(""+o,e,function(){var e=t(this).closest(s);e.removeClass(n);e=e.prev(s);e.length&&e.removeClass(i)}).on(""+r,e,function(){var e=t(this).closest(s);e.addClass(n);e=e.prev(s);e.length&&e.addClass(i)})}(t=t&&t.hasOwnProperty("default")?t.default:t);var n=function(o){var r="md.floatinglabel",e="."+r,t="floatinglabel",n=o.fn[t],s="is-focused",a="has-value",i="change"+e,c="focusin"+e,h="focusout"+e,l=".floating-label",e=".floating-label .custom-select, .floating-label .form-control",u=function(){function i(e){this._element=e,this._parent=o(e).closest(l)[0]}var e=i.prototype;return e.change=function(){o(this._element).val()||o(this._element).is("select")&&""!==o("option:first-child",o(this._element)).html().replace(" ","")?o(this._parent).addClass(a):o(this._parent).removeClass(a)},e.focusin=function(){o(this._parent).addClass(s)},e.focusout=function(){o(this._parent).removeClass(s)},i._jQueryInterface=function(n){return this.each(function(){var e=n||"change",t=o(this).data(r);if(t||(t=new i(this),o(this).data(r,t)),"string"==typeof e){if(void 0===t[e])throw new Error('No method named "'+e+'"');t[e]()}})},i}();return o(document).on(i+" "+c+" "+h,e,function(e){u._jQueryInterface.call(o(this),e.type)}),o.fn[t]=u._jQueryInterface,o.fn[t].Constructor=u,o.fn[t].noConflict=function(){return o.fn[t]=n,u._jQueryInterface},u}(t);function m(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function g(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);(t="function"==typeof Object.getOwnPropertySymbols?t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable})):t).forEach(function(e){var t,n;t=i,e=o[n=e],n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e})}return i}var i,o,s,v=(o="transitionend",s={TRANSITION_END:"mdTransitionEnd",getSelectorFromElement:function(e){var t=e.getAttribute("data-target");t&&"#"!==t||(t=e.getAttribute("href")||"");try{return 0<i(document).find(t).length?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;e=i(e).css("transition-duration");return e?(e=e.split(",")[0],1e3*parseFloat(e)):0},getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},isElement:function(e){return(e[0]||e).nodeType},reflow:function(e){return e.offsetHeight},supportsTransitionEnd:function(){return Boolean(o)},triggerTransitionEnd:function(e){i(e).trigger(o)},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],r=t[i],r=r&&s.isElement(r)?"element":{}.toString.call(r).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(o).test(r))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+r+'" but expected type "'+o+'".')}}},(i=t).fn.emulateTransitionEnd=r,i.event.special[s.TRANSITION_END]={bindType:o,delegateType:o,handle:function(e){if(i(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},s);function r(e){var t=this,n=!1;return i(this).one(s.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||s.triggerTransitionEnd(t)},e),this}t=function(r){var s="md.navdrawer",e="."+s,i="navdrawer",t=r.fn[i],a="navdrawer-backdrop",c="navdrawer-open",h="show",l={breakpoint:"",keyboard:!0,show:!0,type:"default"},u={keyboard:"boolean",show:"boolean",type:"string"},f={CLICK_DATA_API:"click"+e+".data-api",CLICK_DISMISS:"click.dismiss"+e,FOCUSIN:"focusin"+e,HIDDEN:"hidden"+e,HIDE:"hide"+e,KEYDOWN_DISMISS:"keydown.dismiss"+e,MOUSEDOWN_DISMISS:"mousedown.dismiss"+e,MOUSEUP_DISMISS:"mouseup.dismiss"+e,SHOW:"show"+e,SHOWN:"shown"+e},d=".navdrawer-content",_='[data-dismiss="navdrawer"]',e='[data-toggle="navdrawer"]',p=function(){function o(e,t){this._backdrop=null,this._config=this._getConfig(t),this._content=r(e).find(d)[0],this._element=e,this._ignoreBackdropClick=!1,this._isShown=!1,this._typeBreakpoint=""===this._config.breakpoint?"":"-"+this._config.breakpoint}var e,t,n=o.prototype;return n.hide=function(e){var t=this;e&&e.preventDefault(),!this._isTransitioning&&this._isShown&&(e=r.Event(f.HIDE),r(this._element).trigger(e),this._isShown&&!e.isDefaultPrevented()&&(this._isShown=!1,this._isTransitioning=!0,this._setEscapeEvent(),r(document).off(f.FOCUSIN),r(document.body).removeClass(c+"-"+this._config.type+this._typeBreakpoint),r(this._element).removeClass(h),r(this._element).off(f.CLICK_DISMISS),r(this._content).off(f.MOUSEDOWN_DISMISS),e=v.getTransitionDurationFromElement(this._content),r(this._content).one(v.TRANSITION_END,function(e){return t._hideNavdrawer(e)}).emulateTransitionEnd(e),this._showBackdrop()))},n.show=function(e){var t,n=this;this._isTransitioning||this._isShown||(this._isTransitioning=!0,t=r.Event(f.SHOW,{relatedTarget:e}),r(this._element).trigger(t),this._isShown||t.isDefaultPrevented()||(this._isShown=!0,this._setEscapeEvent(),r(this._element).addClass(i+"-"+this._config.type+this._typeBreakpoint),r(this._element).on(f.CLICK_DISMISS,_,function(e){return n.hide(e)}),r(this._content).on(f.MOUSEDOWN_DISMISS,function(){r(n._element).one(f.MOUSEUP_DISMISS,function(e){r(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(),this._showElement(e)))},n.toggle=function(e){return this._isShown?this.hide():this.show(e)},n._enforceFocus=function(){var t=this;r(document).off(f.FOCUSIN).on(f.FOCUSIN,function(e){document!==e.target&&t._element!==e.target&&0===r(t._element).has(e.target).length&&t._element.focus()})},n._getConfig=function(e){return e=g({},l,e),v.typeCheckConfig(i,e,u),e},n._hideNavdrawer=function(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,r(this._element).trigger(f.HIDDEN)},n._removeBackdrop=function(){this._backdrop&&(r(this._backdrop).remove(),this._backdrop=null)},n._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?r(this._element).on(f.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||r(this._element).off(f.KEYDOWN_DISMISS)},n._showBackdrop=function(){var t=this;this._isShown?(this._backdrop=document.createElement("div"),r(this._backdrop).addClass(a).addClass(a+"-"+this._config.type+this._typeBreakpoint).appendTo(document.body),r(this._element).on(f.CLICK_DISMISS,function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&t.hide()}),v.reflow(this._backdrop),r(this._backdrop).addClass(h)):!this._isShown&&this._backdrop&&(r(this._backdrop).removeClass(h),this._removeBackdrop())},n._showElement=function(e){var t=this;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),v.reflow(this._element),r(document.body).addClass(c+"-"+this._config.type+this._typeBreakpoint),r(this._element).addClass(h),this._enforceFocus();var n=r.Event(f.SHOWN,{relatedTarget:e}),e=v.getTransitionDurationFromElement(this._content);r(this._content).one(v.TRANSITION_END,function(){t._element.focus(),t._isTransitioning=!1,r(t._element).trigger(n)}).emulateTransitionEnd(e)},o._jQueryInterface=function(n,i){return this.each(function(){var e=g({},l,r(this).data(),"object"==typeof n&&n?n:{}),t=r(this).data(s);if(t||(t=new o(this,e),r(this).data(s,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},e=o,t=[{key:"Default",get:function(){return l}}],(n=null)&&m(e.prototype,n),t&&m(e,t),o}();return r(document).on(f.CLICK_DATA_API,e,function(e){var t,n=this,i=v.getSelectorFromElement(this);i&&(t=r(i)[0]);i=r(t).data(s)?"toggle":g({},r(t).data(),r(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var o=r(t).one(f.SHOW,function(e){e.isDefaultPrevented()||o.one(f.HIDDEN,function(){r(n).is(":visible")&&n.focus()})});p._jQueryInterface.call(r(t),i,this)}),r.fn[i]=p._jQueryInterface,r.fn[i].Constructor=p,r.fn[i].noConflict=function(){return r.fn[i]=t,p._jQueryInterface},p}(t);e.Util=v,e.ExpansionPanel=void 0,e.FloatingLabel=n,e.NavDrawer=t,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
