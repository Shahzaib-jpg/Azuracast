/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_name_"] = self["webpackChunk_name_"] || []).push([["vendor-nchan"],{

/***/ "./node_modules/nchan/NchanSubscriber.js":
/*!***********************************************!*\
  !*** ./node_modules/nchan/NchanSubscriber.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*\n * NchanSubscriber\n * usage: var sub = new NchanSubscriber(url, opt);\n * \n * opt = {\n *   subscriber: 'longpoll', 'eventsource', or 'websocket',\n *     //or an array of the above indicating subscriber type preference\n *   reconnect: undefined or 'session' or 'persist'\n *     //if the HTML5 sessionStore or localStore should be used to resume\n *     //connections interrupted by a page load\n *   shared: true or undefined\n *     //share connection to same subscriber url between browser \n *     //windows and tabs using localStorage. In shared mode, \n *     //only 1 running subscriber is allowed per url per window/tab.\n * }\n * \n * sub.on(\"transportSetup\", function(opt, subscriberName) {\n *   // opt is a hash/object - not all transports support all options equally. Only longpoll supports arbitrary headers\n *   // subscriberName is a string\n * });\n * \n * sub.on(\"transportNativeCreated\", function(nativeTransportObject, subscriberName) {\n *   // nativeTransportObject is the native transport object and depends on the subscriber type\n *   // subscriberName is a string\n * });\n *\n * sub.on(\"transportNativeBeforeDestroy\", function(nativeTransportObject, subscriberName) {\n *   // nativeTransportObject is the native transport object and depends on the subscriber type\n *   // subscriberName is a string\n * });\n *\n * sub.on(\"message\", function(message, message_metadata) {\n *   // message is a string\n *   // message_metadata may contain 'id' and 'content-type'\n * });\n * \n * sub.on('connect', function(evt) {\n *   //fired when first connected. \n * });\n * \n * sub.on('disconnect', function(evt) {\n *   // when disconnected.\n * });\n * \n * sub.on('error', function(code, message) {\n *   //error callback. not sure about the parameters yet\n * });\n * \n * sub.reconnect; // should subscriber try to reconnect? true by default.\n * sub.reconnectTimeout; //how long to wait to reconnect? does not apply to EventSource, which reconnects on its own.\n * sub.lastMessageId; //last message id. useful for resuming a connection without loss or repetition.\n * \n * sub.start(); // begin (or resume) subscribing\n * sub.stop(); // stop subscriber. do not reconnect.\n */\n\n//Thanks Darren Whitlen ( @prawnsalad ) for your feedback\n\n\n;(function (global, moduleName, factory) { // eslint-disable-line\n  \"use strict\";\n  /* eslint-disable no-undef */\n  var newModule = factory(global);\n  if ( true && module != null && module.exports) {\n    module.exports = newModule;\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return newModule; }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n  /* eslint-enable no-undef */\n})(typeof window !== \"undefined\" ? window : this, \"NchanSubscriber\", function factory(global, undefined) { // eslint-disable-line\n\n  // https://github.com/yanatan16/nanoajax\n  var nanoajax={};\n  (function(){var e=[\"responseType\",\"withCredentials\",\"timeout\",\"onprogress\"];nanoajax.ajax=function(r,o){var a=r.headers||{},u=r.body,s=r.method||(u?\"POST\":\"GET\"),i=false;var f=t(r.cors);function l(e,t){return function(){if(!i){o(f.status===undefined?e:f.status,f.status===0?\"Error\":f.response||f.responseText||t,f);i=true}}}f.open(s,r.url,true);var d=f.onload=l(200);f.onreadystatechange=function(){if(f.readyState===4)d()};f.onerror=l(null,\"Error\");f.ontimeout=l(null,\"Timeout\");f.onabort=l(null,\"Abort\");if(u){n(a,\"X-Requested-With\",\"XMLHttpRequest\");if(!global.FormData||!(u instanceof global.FormData)){n(a,\"Content-Type\",\"application/x-www-form-urlencoded\")}}for(var p=0,c=e.length,g;p<c;p++){g=e[p];if(r[g]!==undefined)f[g]=r[g]}for(var g in a)f.setRequestHeader(g,a[g]);f.send(u);return f};function t(e){if(e&&global.XDomainRequest&&!/MSIE 1/.test(navigator.userAgent))return new XDomainRequest;if(global.XMLHttpRequest)return new XMLHttpRequest}function n(e,t,n){e[t]=e[t]||n}})(); // eslint-disable-line\n\n\n  // https://github.com/component/emitter\n  function Emitter(t){return t?mixin(t):void 0}function mixin(t){for(var e in Emitter.prototype)t[e]=Emitter.prototype[e];return t}Emitter.prototype.on=Emitter.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks[\"$\"+t]=this._callbacks[\"$\"+t]||[]).push(e),this},Emitter.prototype.once=function(t,e){function i(){this.off(t,i),e.apply(this,arguments)}return i.fn=e,this.on(t,i),this},Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var i=this._callbacks[\"$\"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks[\"$\"+t],this;for(var r,s=0;s<i.length;s++)if(r=i[s],r===e||r.fn===e){i.splice(s,1);break}return this},Emitter.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),i=this._callbacks[\"$\"+t];if(i){i=i.slice(0);for(var r=0,s=i.length;s>r;++r)i[r].apply(this,e)}return this},Emitter.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks[\"$\"+t]||[]},Emitter.prototype.hasListeners=function(t){return!!this.listeners(t).length};// eslint-disable-line\n\n  var ughbind = (Function.prototype.bind\n    ? function ughbind(fn, thisObj) {\n      return fn.bind(thisObj);\n    }\n    : function ughbind(fn, thisObj) {\n      return function() {\n        fn.apply(thisObj, arguments);\n      };\n    }\n  );\n\n  var sharedSubscriberTable={};\n\n  \"use strict\"; \n  function NchanSubscriber(url, opt) {\n    if(typeof window !== \"undefined\" && this === window) {\n      throw \"use 'new NchanSubscriber(...)' to initialize\";\n    }\n    \n    this.url = url;\n    opt = opt || {};\n    \n    //which transport should i use?\n    if(typeof opt === \"string\") {\n      opt = {subscriber: opt}; \n    }\n    if(opt.transport && !opt.subscriber) {\n      opt.subscriber = opt.transport;\n    }\n    if(typeof opt.subscriber === \"string\") {\n      opt.subscriber = [ opt.subscriber ];\n    }\n    this.desiredTransport = opt.subscriber;\n    \n    if(opt.shared) {\n      if (!(\"localStorage\" in global)) {\n        throw \"localStorage unavailable for use in shared NchanSubscriber\";\n      }\n      \n      var pre = \"NchanSubscriber:\" + this.url + \":shared:\";\n      var sharedKey = function(key) { return pre + key; };\n      var localStorage = global.localStorage;\n      this.shared = {\n        id: \"\" + Math.random() + Math.random(),\n        key: sharedKey,\n        get: function(key) {\n          return localStorage.getItem(sharedKey(key));\n        },\n        set: function(key, val) {\n          return localStorage.setItem(sharedKey(key), val);\n        },\n        setWithId: ughbind(function(key, val) {\n          return this.shared.set(key, \"##\" + this.shared.id + \":\" + val);\n        }, this),\n        getWithId: ughbind(function(key) {\n          return this.shared.stripIdFromVal(this.shared.get(key));\n        }, this),\n        stripIdFromVal: function(val) {\n          if(!val) {\n            return val;\n          }\n          var sep = val.indexOf(\":\");\n          if(val[0]!=val[1] || val[0]!=\"#\" || !sep) {\n            //throw \"not an event value with id\";\n            return val; //for backwards-compatibility\n          }\n          return val.substring(sep+1, val.length);\n        },\n        remove: function(key) {\n          return localStorage.removeItem(sharedKey(key));\n        },\n        matchEventKey: ughbind(function(ev, key) {\n          if(ev.storageArea && ev.storageArea != localStorage){\n            return false;\n          }\n          return ev.key == sharedKey(key);\n        }, this),\n        matchEventKeyWithId: ughbind(function(ev, key) {\n          if(this.shared.matchEventKey(ev, key)) {\n            var val = ev.newValue;\n            var sep = val.indexOf(\":\");\n            if(val[0]!=val[1] || val[0]!=\"#\" || !sep) {\n              //throw \"not an event value with id\";\n              return true; //for backwards-compatibility\n            }\n            var id = val.substring(2, sep);\n            return (id != this.shared.id); //ignore own events (accomodations for IE. Fuckin' IE, even after all these years...)\n          }\n          else {\n            return false;\n          }\n        }, this),\n        setRole: ughbind(function(role) {\n          //console.log(this.url, \"set shared role to \", role);\n          if(role == \"master\" && this.shared.role != \"master\") {\n            var now = new Date().getTime()/1000;\n            this.shared.setWithId(\"master:created\", now);\n            this.shared.setWithId(\"master:lastSeen\", now);\n          }\n          if(role == \"slave\" && !this.lastMessageId) {\n            this.lastMessageId = this.shared.get(\"msg:id\");\n          }\n          this.shared.role = role;\n          return this;\n        }, this),\n        \n        demoteToSlave: ughbind(function() {\n          //console.log(\"demote to slave\");\n          if(this.shared.role != \"master\") {\n            throw \"can't demote non-master to slave\";\n          }\n          if(this.running) {\n            this.stop();\n            this.shared.setRole(\"slave\");\n            this.initializeTransport();\n            this.start();\n          }\n          else {\n            this.initializeTransport();\n          }\n        }, this),\n        \n        maybePromoteToMaster: ughbind(function() {\n          if(!(this.running || this.starting)) {\n            //console.log(this.url, \"stopped Subscriber won't be promoted to master\");\n            return this;\n          }\n          if(this.shared.maybePromotingToMaster) {\n            //console.log(this.url, \" already maybePromotingToMaster\");\n            return;\n          }\n          this.shared.maybePromotingToMaster = true;\n          \n          //console.log(this.url, \"maybe promote to master\");\n          var processRoll;\n          \n          var lotteryRoundDuration = 2000;\n          var currentContenders = 0;\n          \n          //roll the dice\n          var roll = Math.random();\n          var bestRoll = roll;\n          \n          var checkRollInterval;\n          var checkRoll = ughbind(function(dontProcess) {\n            var latestSharedRollTime = parseFloat(this.shared.getWithId(\"lotteryTime\"));\n            var latestSharedRoll = parseFloat(this.shared.getWithId(\"lottery\"));\n            var notStale = !latestSharedRollTime || (latestSharedRollTime > (new Date().getTime() - lotteryRoundDuration * 2));\n            if(notStale && latestSharedRoll && (!bestRoll || latestSharedRoll > bestRoll)) {\n              bestRoll = latestSharedRoll;\n            }\n            if(!dontProcess) {\n              processRoll();\n            }\n          }, this);\n          \n          checkRoll(true);\n          this.shared.setWithId(\"lottery\", roll);\n          this.shared.setWithId(\"lotteryTime\", new Date().getTime() / 1000);\n          \n          var rollCallback = ughbind(function(ev) {\n            if(this.shared.matchEventKeyWithId(ev, \"lottery\") && ev.newValue) {\n              currentContenders += 1;\n              var newVal = parseFloat(this.shared.stripIdFromVal(ev.newValue));\n              var oldVal = parseFloat(this.shared.stripIdFromVal(ev.oldValue));\n              if(oldVal > newVal) {\n                this.shared.setWithId(\"lottery\", oldVal);\n              }\n              \n              if(!bestRoll || newVal >= bestRoll) {\n                //console.log(\"new bestRoll\", newVal);\n                bestRoll = newVal;\n              }\n            }\n          }, this);\n          global.addEventListener(\"storage\", rollCallback);\n          \n          var finish = ughbind(function() {\n            //console.log(\"finish\");\n            this.shared.maybePromotingToMaster = false;\n            //console.log(this.url, this.shared.role);\n            global.removeEventListener(\"storage\", rollCallback);\n            if(checkRollInterval) {\n              clearInterval(checkRollInterval);\n            }\n            if(this.shared && this.shared.role == \"master\") {\n              this.shared.remove(\"lottery\");\n              this.shared.remove(\"lotteryTime\");\n            }\n            if(this.running) {\n              this.stop();\n              this.initializeTransport();\n              this.start();\n            }\n            else {\n              this.initializeTransport();\n              if(this.starting) {\n                this.start();\n              }\n            }\n          }, this);\n          \n          processRoll = ughbind(function() {\n            //console.log(\"roll, bestroll\", roll, bestRoll);\n            if(roll < bestRoll) {\n              //console.log(this.url, \"loser\");\n              this.shared.setRole(\"slave\");\n              finish();\n            }\n            else if(roll >= bestRoll) {\n              //var now = new Date().getTime() / 1000;\n              //var lotteryTime = parseFloat(this.shared.getWithId(\"lotteryTime\"));\n              //console.log(lotteryTime, now - lotteryRoundDuration/1000);\n              if(currentContenders == 0) {\n                //console.log(\"winner, no more contenders!\");\n                this.shared.setRole(\"master\");\n                finish();\n              }\n              else {\n                //console.log(\"winning, but have contenders\", currentContenders);\n                currentContenders = 0;\n              }\n            }\n          }, this);\n          \n          checkRollInterval = global.setInterval(checkRoll, lotteryRoundDuration);\n        }, this),\n        masterCheckInterval: 10000\n      };\n    }\n    \n    this.lastMessageId = opt.id || opt.msgId;\n    this.reconnect = typeof opt.reconnect == \"undefined\" ? true : opt.reconnect;\n    this.reconnectTimeout = opt.reconnectTimeout || 1000;\n    \n    \n    var saveConnectionState;\n    if(!opt.reconnect) {\n      saveConnectionState = function() {};\n    }\n    else {\n      var index = \"NchanSubscriber:\" + url + \":lastMessageId\";\n      var storage;\n      if(opt.reconnect == \"persist\") {\n        storage = (\"localStorage\" in global) && global.localStorage;\n        if(!storage)\n          throw \"can't use reconnect: 'persist' option: localStorage not available\";\n      }\n      else if(opt.reconnect == \"session\") {\n        storage = (\"sessionStorage\" in global) && global.sessionStorage;\n        if(!storage)\n          throw \"can't use reconnect: 'session' option: sessionStorage not available\";\n      }\n      else {\n        throw \"invalid 'reconnect' option value \" + opt.reconnect;\n      }\n      saveConnectionState = ughbind(function(msgid) {\n        if(this.shared && this.shared.role == \"slave\") return;\n        storage.setItem(index, msgid);\n      }, this);\n      this.lastMessageId = storage.getItem(index);\n    }\n    \n    var onUnloadEvent = ughbind(function() {\n      if(this.running) {\n        this.stop();\n      }\n      if(this.shared && this.shared.role == \"master\") {\n        this.shared.setWithId(\"status\", \"disconnected\");\n      }\n    }, this);\n    global.addEventListener(\"beforeunload\", onUnloadEvent, false);\n    // swap `beforeunload` to `unload` after DOM is loaded\n    global.addEventListener(\"DOMContentLoaded\", function() {\n      global.removeEventListener(\"beforeunload\", onUnloadEvent, false);\n      global.addEventListener(\"unload\", onUnloadEvent, false);\n    }, false);\n    \n    \n    var notifySharedSubscribers;\n    if(this.shared) {\n      notifySharedSubscribers = ughbind(function(name, data) {\n        if(this.shared.role != \"master\") {\n          return;\n        }\n        \n        if(name == \"message\") {\n          this.shared.set(\"msg:id\", data[1] && data[1].id || \"\");\n          this.shared.set(\"msg:content-type\", data[1] && data[1][\"content-type\"] || \"\");\n          this.shared.set(\"msg\", data[0]);\n        }\n        else if(name == \"error\") {\n          //TODO \n        }\n        else if(name == \"connecting\") {\n          this.shared.setWithId(\"status\", \"connecting\");\n        }\n        else if(name == \"connect\") {\n          this.shared.setWithId(\"status\", \"connected\");\n        }\n        else if(name == \"reconnect\") {\n          this.shared.setWithId(\"status\", \"reconnecting\");\n        }\n        else if(name == \"disconnect\") {\n          this.shared.setWithId(\"status\", \"disconnected\");\n        }\n      }, this);\n    }\n    else {\n      notifySharedSubscribers = function(){};\n    }\n    \n    var restartTimeoutIndex;\n    var stopHandler = ughbind(function() {\n      if(!restartTimeoutIndex && this.running && this.reconnect && !this.transport.reconnecting && !this.transport.doNotReconnect) {\n        //console.log(\"stopHAndler reconnect plz\", this.running, this.reconnect);\n        notifySharedSubscribers(\"reconnect\");\n        restartTimeoutIndex = global.setTimeout(ughbind(function() {\n          restartTimeoutIndex = null;\n          this.stop();\n          this.start();\n        }, this), this.reconnectTimeout);\n      }\n      else {\n        notifySharedSubscribers(\"disconnect\");\n      }\n    }, this);\n    \n    this.on(\"message\", function msg(msg, meta) {\n      this.lastMessageId=meta.id;\n      if(meta.id) {\n        saveConnectionState(meta.id);\n      }\n      notifySharedSubscribers(\"message\", [msg, meta]);\n      //console.log(msg, meta);\n    });\n    this.on(\"error\", function fail(code, text) {\n      stopHandler(code, text);\n      notifySharedSubscribers(\"error\", [code, text]);\n      //console.log(\"failure\", code, text);\n    });\n    this.on(\"connect\", function() {\n      this.connected = true;\n      notifySharedSubscribers(\"connect\");\n    });\n    this.on(\"__disconnect\", function fail(code, text) {\n      this.connected = false;\n      this.emit(\"disconnect\", code, text);\n      stopHandler(code, text);\n      //console.log(\"__disconnect\", code, text);\n    });\n  }\n\n  Emitter(NchanSubscriber.prototype);\n\n  NchanSubscriber.prototype.initializeTransport = function(possibleTransports) {\n    if(possibleTransports) {\n      this.desiredTransport = possibleTransports;\n    }\n    if(this.shared && this.shared.role == \"slave\") {\n      this.transport = new this.SubscriberClass[\"__slave\"](ughbind(this.emit, this)); //try it\n    }\n    else {\n      var tryInitializeTransport = ughbind(function(name) {\n        if(!this.SubscriberClass[name]) {\n          throw \"unknown subscriber type \" + name;\n        }\n        try {\n          this.transport = new this.SubscriberClass[name](ughbind(this.emit, this)); //try it\n          return this.transport;\n        } catch(err) { /*meh...*/ }\n      }, this);\n      \n      var i;\n      if(this.desiredTransport) {\n        for(i=0; i<this.desiredTransport.length; i++) {\n          if(tryInitializeTransport(this.desiredTransport[i])) {\n            break;\n          }\n        }\n      }\n      else {\n        for(i in this.SubscriberClass) {\n          if (this.SubscriberClass.hasOwnProperty(i) && i[0] != \"_\" && tryInitializeTransport(i)) {\n            break;\n          }\n        }\n      }\n    }\n    if(! this.transport) {\n      throw \"can't use any transport type\";\n    }\n  };\n\n  var storageEventListener;\n\n  NchanSubscriber.prototype.start = function() {\n    if(this.running)\n      throw \"Can't start NchanSubscriber, it's already started.\";\n    \n    this.starting = true;\n    \n    if(this.shared) {\n      if(sharedSubscriberTable[this.url] && sharedSubscriberTable[this.url] != this) {\n        throw \"Only 1 shared subscriber allowed per url per window/tab.\";\n      }\n      sharedSubscriberTable[this.url] = this;\n      \n      if(!this.shared.role) {\n        var status = this.shared.getWithId(\"status\");\n        storageEventListener = ughbind(function(ev) {\n          if(this.shared.matchEventKeyWithId(ev, \"status\")) {\n            var newValue = this.shared.stripIdFromVal(ev.newValue);\n            if(newValue == \"disconnected\") {\n              if(this.shared.role == \"slave\") {\n                //play the promotion lottery\n                //console.log(this.url, \"status changed to disconnected, maybepromotetomaster\", ev.newValue, ev.oldValue);\n                this.shared.maybePromoteToMaster();\n              }\n              else if(this.shared.role == \"master\") {\n                //do nothing\n                //console.log(this.url, \"current role is master, do nothing?...\");\n              }\n            }\n          }\n          else if(this.shared.role == \"master\" && this.shared.matchEventKeyWithId(ev, \"master:created\") && ev.newValue) {\n            //a new master has arrived. demote to slave.\n            this.shared.demoteToSlave();\n          }\n        }, this);\n        global.addEventListener(\"storage\", storageEventListener);\n        if(status == \"disconnected\") {\n          //console.log(this.url, \"status == disconnected, maybepromotetomaster\");\n          this.shared.maybePromoteToMaster();\n        }\n        else {\n          this.shared.setRole(status ? \"slave\" : \"master\");\n          this.initializeTransport();\n        }\n      }\n      \n      if(this.shared.role == \"master\") {\n        this.shared.setWithId(\"status\", \"connecting\");\n        this.transport.listen(this.url, this.lastMessageId);\n        this.running = true;\n        delete this.starting;\n        \n        //master checkin interval\n        this.shared.masterIntervalCheckID = global.setInterval(ughbind(function() {\n          this.shared.setWithId(\"master:lastSeen\", new Date().getTime() / 1000);\n        }, this), this.shared.masterCheckInterval * 0.8);\n      }\n      else if(this.shared.role == \"slave\") {\n        this.transport.listen(this.url, this.shared);\n        this.running = true;\n        delete this.starting;\n        \n        //slave check if master is around\n        this.shared.masterIntervalCheckID = global.setInterval(ughbind(function() {\n          var lastCheckin = parseFloat(this.shared.getWithId(\"master:lastSeen\"));\n          if(!lastCheckin || lastCheckin < (new Date().getTime() / 1000) - this.shared.masterCheckInterval / 1000) {\n            //master hasn't checked in for too long. assume it's gone.\n            this.shared.maybePromoteToMaster();\n          }\n        }, this), this.shared.masterCheckInterval);\n      }\n    }\n    else {\n      if(!this.transport) {\n        this.initializeTransport();\n      }\n      this.transport.listen(this.url, this.lastMessageId);\n      this.running = true;\n      delete this.starting;\n    }\n    return this;\n  };\n\n  NchanSubscriber.prototype.stop = function() {\n    if(!this.running)\n      throw \"Can't stop NchanSubscriber, it's not running.\";\n    \n    this.running = false;\n    if(storageEventListener) {\n      global.removeEventListener(\"storage\", storageEventListener);\n    }\n    this.transport.cancel();\n    if(this.shared) {\n      delete sharedSubscriberTable[this.url];\n      if(this.shared.masterIntervalCheckID) {\n        clearInterval(this.shared.masterIntervalCheckID);\n        delete this.shared.masterIntervalCheckID;\n      }\n    }\n    return this;\n  };\n\n  function addLastMsgIdToQueryString(url, msgid) {\n    if(msgid) {\n      var m = url.match(/(\\?.*)$/);\n      url += (m ? \"&\" : \"?\") + \"last_event_id=\" + encodeURIComponent(msgid);\n    }\n    return url;\n  }\n\n  NchanSubscriber.prototype.SubscriberClass = {\n    \"websocket\": (function() {\n      function WSWrapper(emit) {\n        WebSocket;\n        this.emit = emit;\n        this.name = \"websocket\";\n        this.opt = {\n          url: null,\n          msgid: null,\n          headers : {\n            'Sec-WebSocket-Protocol' : \"ws+meta.nchan\"\n          }\n        }\n      }\n\n      WSWrapper.prototype.setup = function() {\n        this.emit(\"transportSetup\", this.opt, this.name);\n        var count = 0;\n        var property;\n        for ( property in this.opt.headers ) count++;\n        if (count != 1 && \"Sec-WebSocket-Protocol\" in this.opt.headers) {\n          throw \"WebSocket only supports one header; Sec-WebSocket-Protocol\";\n        }\n      };\n\n      WSWrapper.prototype.websocketizeURL = function(url) {\n        var m = url.match(/^((\\w+:)?\\/\\/([^/]+))?(\\/)?(.*)/);\n        var protocol = m[2];\n        var host = m[3];\n        var absolute = m[4];\n        var path = m[5];\n        \n        var loc;\n        if(typeof window == \"object\") {\n          loc = window.location;\n        }\n        else if(typeof document == \"object\") {\n          loc = document.location;\n        }\n        \n        if(!protocol && loc) {\n          protocol = loc.protocol;\n        }\n        if(protocol == \"https:\") {\n          protocol = \"wss:\";\n        }\n        else if(protocol == \"http:\") {\n          protocol = \"ws:\";\n        }\n        else if(protocol != \"ws:\") {\n          protocol = \"wss:\"; //default setting: secure, unless \"ws:\" explicitly specified\n        }\n        \n        if(!host && loc) {\n          host = loc.host;\n        }\n        \n        if(!absolute) {\n          path = loc ? loc.pathname.match(/(.*\\/)[^/]*/)[1] + path : \"/\" + path;\n        }\n        else {\n          path = \"/\" + path;\n        }\n        \n        return protocol + \"//\" + host + path;\n      };\n      \n      WSWrapper.prototype.listen = function(url, msgid) {\n        if(this.listener) {\n          throw \"websocket already listening\";\n        }\n        this.opt.url = url;\n        this.opt.msgid = msgid;\n        this.setup();\n        url = this.websocketizeURL(this.opt.url);\n        url = addLastMsgIdToQueryString(url, this.opt.msgid);\n        //console.log(url);\n        this.listener = new WebSocket(url, this.opt.headers[\"Sec-WebSocket-Protocol\"]);\n        var l = this.listener;\n        this.emit(\"transportNativeCreated\", l, this.name);\n        l.onmessage = ughbind(function(evt) {\n          if (evt.data instanceof Blob) {\n            //extract header, preserve rest of blob.\n            //let's assume the header ends in the first 255 chars\n            var headerSlice = evt.data.slice(0, 255);\n            var reader = new FileReader();\n            reader.addEventListener(\"loadend\", ughbind(function() {\n              var m = reader.result.match(/^id: (.*)\\n(content-type: (.*)\\n)?\\n/m);\n              this.emit(\"message\", evt.data.slice(m[0].length), {\"id\": m[1], \"content-type\": m[3]});\n            }, this));\n            reader.readAsText(headerSlice)\n          } else {\n            var m = evt.data.match(/^id: (.*)\\n(content-type: (.*)\\n)?\\n/m);\n            this.emit(\"message\", evt.data.substr(m[0].length), {\"id\": m[1], \"content-type\": m[3]});\n          }\n        }, this);\n        \n        l.onopen = ughbind(function(evt) {\n          this.emit(\"connect\", evt);\n          //console.log(\"connect\", evt);\n        }, this);\n        \n        l.onerror = ughbind(function(evt) {\n          //console.log(\"error\", evt);\n          this.emit(\"error\", evt, l);\n          delete this.listener;\n        }, this);\n        \n        l.onclose = ughbind(function(evt) {\n          this.emit(\"__disconnect\", evt);\n          delete this.listener;\n        }, this);\n      };\n      \n      WSWrapper.prototype.cancel = function() {\n        if(this.listener) {\n          this.emit(\"transportNativeBeforeDestroy\", this.listener, this.name);\n          this.listener.close();\n          delete this.listener;\n        }\n      };\n      \n      return WSWrapper;\n    })(),\n  \n    \"eventsource\": (function() {\n      function ESWrapper(emit) {\n        EventSource;\n        this.emit = emit;\n        this.name = \"eventsource\";\n        this.opt = {\n            url: null,\n            msgid: null,\n            headers : {\n          }\n        }\n      }\n\n      ESWrapper.prototype.setup = function() {\n        this.emit(\"transportSetup\", this.opt, this.name);\n        var count = 0;\n        var property;\n        for ( property in this.opt.headers ) count++;\n        if (count != 0) {\n          throw \"EventSource does not support headers\";\n        }\n      };\n\n      ESWrapper.prototype.listen= function(url, msgid) {\n        if(this.listener) {\n          throw \"there's a ES listener running already\";\n        }\n        this.opt.url = url;\n        this.opt.msgid = msgid;\n        this.setup();\n        url = addLastMsgIdToQueryString(this.opt.url, this.opt.msgid);\n        this.listener = new EventSource(url);\n        var l = this.listener;\n        this.emit(\"transportNativeCreated\", l, this.name);\n        l.onmessage = ughbind(function(evt){\n          //console.log(\"message\", evt);\n          this.emit(\"message\", evt.data, {id: evt.lastEventId});\n        }, this);\n        \n        l.onopen = ughbind(function(evt) {\n          this.reconnecting = false;\n          //console.log(\"connect\", evt);\n          this.emit(\"connect\", evt);\n        }, this);\n        \n        l.onerror = ughbind(function(evt) {\n          //EventSource will try to reconnect by itself\n          //console.log(\"onerror\", this.listener.readyState, evt);\n          if(this.listener.readyState == EventSource.CONNECTING && !this.reconnecting) {\n            if(!this.reconnecting) {\n              this.reconnecting = true;\n              this.emit(\"__disconnect\", evt);\n            }\n          }\n          else {\n            this.emit(\"__disconnect\", evt);\n            //console.log('other __disconnect', evt);\n          }\n        }, this);\n      };\n      \n      ESWrapper.prototype.cancel= function() {\n        if(this.listener) {\n          this.emit(\"transportNativeBeforeDestroy\", this.listener, this.name);\n          this.listener.close();\n          delete this.listener;\n        }\n      };\n      \n      return ESWrapper;\n    })(),\n    \n    \"longpoll\": (function () {\n      function Longpoll(emit) {\n        this.pollingRequest = null;\n        this.longPollStartTime = null;\n        this.maxLongPollTime = 5*60*1000; //5 minutes\n        this.emit = emit;\n        this.name = \"longpoll\";\n        this.opt = {\n          url: null,\n          msgid: null,\n          headers : {\n          }\n        }\n      }\n\n      Longpoll.prototype.setup = function() {\n        this.emit(\"transportSetup\", this.opt, this.name);\n        var count = 0;\n        var property;\n        for ( property in this.opt.headers ) count++;\n      };\n\n      Longpoll.prototype.listen = function(url, msgid) {\n        if(this.req) {\n          throw \"already listening\";\n        }\n        this.opt.url = url;\n        this.opt.msgid = msgid;\n        if(msgid) {\n          this.opt.headers[\"Etag\"] = msgid;\n        }\n        this.setup();\n\n        var setHeader = ughbind(function(incoming, name) {\n          if(incoming) { this.opt.headers[name]= incoming; }\n        }, this);\n\n        this.pollingRequest = ughbind(function() {\n          if (this.req) {\n            this.emit(\"transportNativeBeforeDestroy\", this.req, this.name);\n          }\n          this.reqStartTime = new Date().getTime();\n          this.req = nanoajax.ajax({url: this.opt.url, headers: this.opt.headers}, requestCallback);\n          this.emit(\"transportNativeCreated\", this.req, this.name);\n        }, this);\n        var  requestCallback;\n        requestCallback = ughbind(function (code, response_text, req) {\n          setHeader(req.getResponseHeader(\"Last-Modified\"), \"If-Modified-Since\");\n          setHeader(req.getResponseHeader(\"Etag\"), \"If-None-Match\");\n          \n          if(code >= 200 && code <= 210) {\n            //legit reply\n            var content_type = req.getResponseHeader(\"Content-Type\");\n            if (!this.parseMultipartMixedMessage(content_type, response_text, req)) {\n              this.emit(\"message\", response_text || \"\", {\"content-type\": content_type, \"id\": this.msgIdFromResponseHeaders(req)});\n            }\n            if (this.req) { //this check is needed because stop() may have been called in the message callback\n              this.pollingRequest();\n            }\n          }\n          else if((code == 0 && response_text == \"Error\" && req.readyState == 4) || (code === null && response_text != \"Abort\")) {\n            //console.log(\"abort!!!\");\n            this.emit(\"__disconnect\", code || 0, response_text);\n            delete this.req;\n          }\n          else if(code !== null) {\n            //HTTP error\n            this.emit(\"error\", code, response_text);\n            delete this.req;\n          }\n          else {\n            //don't care about abortions \n            delete this.req;\n            this.emit(\"__disconnect\");\n            //console.log(\"abort!\");\n          }\n        }, this);\n        \n        this.pollingRequest();\n        this.emit(\"connect\");\n        \n        return this;\n      };\n      \n      Longpoll.prototype.parseMultipartMixedMessage = function(content_type, text, req) {\n        var m = content_type && content_type.match(/^multipart\\/mixed;\\s+boundary=(.*)$/);\n        if(!m) { \n          return false;\n        }\n        var boundary = m[1];\n        \n        var msgs = text.split(\"--\" + boundary);\n        if(msgs[0] != \"\" || !msgs[msgs.length-1].match(/--\\r?\\n/)) { throw \"weird multipart/mixed split\"; }\n        \n        msgs = msgs.slice(1, -1);\n        for(var i in msgs) {\n          m = msgs[i].match(/^(.*)\\r?\\n\\r?\\n([\\s\\S]*)\\r?\\n$/m);\n          var hdrs = m[1].split(\"\\n\");\n          \n          var meta = {};\n          for(var j in hdrs) {\n            var hdr = hdrs[j].match(/^([^:]+):\\s+(.*)/);\n            if(hdr && hdr[1] == \"Content-Type\") {\n              meta[\"content-type\"] = hdr[2];\n            }\n          }\n          \n          if(i == msgs.length - 1) {\n            meta[\"id\"] = this.msgIdFromResponseHeaders(req);\n          }\n          this.emit(\"message\", m[2], meta);\n        }\n        return true;\n      };\n      \n      Longpoll.prototype.msgIdFromResponseHeaders = function(req) {\n        var lastModified, etag;\n        lastModified = req.getResponseHeader(\"Last-Modified\");\n        etag = req.getResponseHeader(\"Etag\");\n        if(lastModified) {\n          return \"\" + Date.parse(lastModified)/1000 + \":\" + (etag || \"0\");\n        }\n        else if(etag) {\n          return etag;\n        }\n        else {\n          return null;\n        }\n      };\n      \n      Longpoll.prototype.cancel = function() {\n        if(this.req) {\n          this.emit(\"transportNativeBeforeDestroy\", this.req, this.name);\n          this.req.abort();\n          delete this.req;\n        }\n        return this; \n      };\n      \n      return Longpoll;\n    })(),\n    \n    \"__slave\": (function() {\n      function LocalStoreSlaveTransport(emit) {\n        this.emit = emit;\n        this.doNotReconnect = true;\n        this.shared = null;\n        this.name = \"__slave\";\n        this.opt = {\n          url: null,\n          msgid: null,\n          headers : {\n          }\n        }\n      }\n\n      LocalStoreSlaveTransport.prototype.setup = function() {\n        this.emit(\"transportSetup\", this.opt, this.name);\n        var count = 0;\n        var property;\n        for ( property in this.opt.headers ) count++;\n        if (count != 0) {\n          throw \"__slave does not support headers\";\n        }\n      };\n\n      LocalStoreSlaveTransport.prototype.listen = function(url, shared) {\n        this.shared = shared;\n        this.opt.url = url;  \n        this.setup();\n        this.statusChangeChecker = ughbind(function(ev) {\n          if(this.shared.matchEventKey(ev, \"msg\")) {\n            var msgId = this.shared.get(\"msg:id\");\n            var contentType = this.shared.get(\"msg:content-type\");\n            var msg = this.shared.get(\"msg\");\n            this.emit(\"message\", msg, {\"id\": msgId == \"\" ? undefined : msgId, \"content-type\": contentType == \"\" ? undefined : contentType});\n          }\n        }, this);\n        global.addEventListener(\"storage\", this.statusChangeChecker);\n        //this.emit(\"transportNativeCreated\", this, this.name);\n      };\n        \n      LocalStoreSlaveTransport.prototype.cancel = function() {\n        global.removeEventListener(\"storage\", this.statusChangeChecker);\n      };\n      \n      return LocalStoreSlaveTransport;\n    })()\n\n  };\n\n  return NchanSubscriber;\n});\n\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/nchan/NchanSubscriber.js?");

/***/ })

}]);