<?php

namespace DoctrineProxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StorageLocation extends \App\Entity\StorageLocation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'type', 'adapter', 'path', 's3CredentialKey', 's3CredentialSecret', 's3Region', 's3Version', 's3Bucket', 's3Endpoint', 'dropboxAuthToken', 'storageQuota', 'storageUsed', 'media', 'id'];
        }

        return ['__isInitialized__', 'type', 'adapter', 'path', 's3CredentialKey', 's3CredentialSecret', 's3Region', 's3Version', 's3Bucket', 's3Endpoint', 'dropboxAuthToken', 'storageQuota', 'storageUsed', 'media', 'id'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StorageLocation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getType(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeEnum(): \App\Entity\Enums\StorageLocationTypes
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeEnum', []);

        return parent::getTypeEnum();
    }

    /**
     * {@inheritDoc}
     */
    public function getAdapter(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdapter', []);

        return parent::getAdapter();
    }

    /**
     * {@inheritDoc}
     */
    public function getAdapterEnum(): \App\Entity\Enums\StorageLocationAdapters
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdapterEnum', []);

        return parent::getAdapterEnum();
    }

    /**
     * {@inheritDoc}
     */
    public function getPath(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getFilteredPath(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFilteredPath', []);

        return parent::getFilteredPath();
    }

    /**
     * {@inheritDoc}
     */
    public function applyPath(string $suffix = NULL): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'applyPath', [$suffix]);

        return parent::applyPath($suffix);
    }

    /**
     * {@inheritDoc}
     */
    public function setPath(string $path): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPath', [$path]);

        parent::setPath($path);
    }

    /**
     * {@inheritDoc}
     */
    public function getS3CredentialKey(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getS3CredentialKey', []);

        return parent::getS3CredentialKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setS3CredentialKey(?string $s3CredentialKey): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setS3CredentialKey', [$s3CredentialKey]);

        parent::setS3CredentialKey($s3CredentialKey);
    }

    /**
     * {@inheritDoc}
     */
    public function getS3CredentialSecret(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getS3CredentialSecret', []);

        return parent::getS3CredentialSecret();
    }

    /**
     * {@inheritDoc}
     */
    public function setS3CredentialSecret(?string $s3CredentialSecret): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setS3CredentialSecret', [$s3CredentialSecret]);

        parent::setS3CredentialSecret($s3CredentialSecret);
    }

    /**
     * {@inheritDoc}
     */
    public function getS3Region(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getS3Region', []);

        return parent::getS3Region();
    }

    /**
     * {@inheritDoc}
     */
    public function setS3Region(?string $s3Region): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setS3Region', [$s3Region]);

        parent::setS3Region($s3Region);
    }

    /**
     * {@inheritDoc}
     */
    public function getS3Version(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getS3Version', []);

        return parent::getS3Version();
    }

    /**
     * {@inheritDoc}
     */
    public function setS3Version(?string $s3Version): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setS3Version', [$s3Version]);

        parent::setS3Version($s3Version);
    }

    /**
     * {@inheritDoc}
     */
    public function getS3Bucket(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getS3Bucket', []);

        return parent::getS3Bucket();
    }

    /**
     * {@inheritDoc}
     */
    public function setS3Bucket(?string $s3Bucket): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setS3Bucket', [$s3Bucket]);

        parent::setS3Bucket($s3Bucket);
    }

    /**
     * {@inheritDoc}
     */
    public function getS3Endpoint(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getS3Endpoint', []);

        return parent::getS3Endpoint();
    }

    /**
     * {@inheritDoc}
     */
    public function setS3Endpoint(?string $s3Endpoint): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setS3Endpoint', [$s3Endpoint]);

        parent::setS3Endpoint($s3Endpoint);
    }

    /**
     * {@inheritDoc}
     */
    public function getDropboxAuthToken(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDropboxAuthToken', []);

        return parent::getDropboxAuthToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setDropboxAuthToken(?string $dropboxAuthToken): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDropboxAuthToken', [$dropboxAuthToken]);

        parent::setDropboxAuthToken($dropboxAuthToken);
    }

    /**
     * {@inheritDoc}
     */
    public function isLocal(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isLocal', []);

        return parent::isLocal();
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageQuota(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageQuota', []);

        return parent::getStorageQuota();
    }

    /**
     * {@inheritDoc}
     */
    public function setStorageQuota(\Brick\Math\BigInteger|string|null $storageQuota): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStorageQuota', [$storageQuota]);

        parent::setStorageQuota($storageQuota);
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageQuotaBytes(): ?\Brick\Math\BigInteger
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageQuotaBytes', []);

        return parent::getStorageQuotaBytes();
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageUsed(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageUsed', []);

        return parent::getStorageUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function setStorageUsed(\Brick\Math\BigInteger|string|null $storageUsed): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStorageUsed', [$storageUsed]);

        parent::setStorageUsed($storageUsed);
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageUsedBytes(): \Brick\Math\BigInteger
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageUsedBytes', []);

        return parent::getStorageUsedBytes();
    }

    /**
     * {@inheritDoc}
     */
    public function addStorageUsed(\Brick\Math\BigInteger|string|int $newStorageAmount): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStorageUsed', [$newStorageAmount]);

        parent::addStorageUsed($newStorageAmount);
    }

    /**
     * {@inheritDoc}
     */
    public function removeStorageUsed(\Brick\Math\BigInteger|string|int $amountToRemove): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeStorageUsed', [$amountToRemove]);

        parent::removeStorageUsed($amountToRemove);
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageAvailable(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageAvailable', []);

        return parent::getStorageAvailable();
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageAvailableBytes(): ?\Brick\Math\BigInteger
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageAvailableBytes', []);

        return parent::getStorageAvailableBytes();
    }

    /**
     * {@inheritDoc}
     */
    public function isStorageFull(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isStorageFull', []);

        return parent::isStorageFull();
    }

    /**
     * {@inheritDoc}
     */
    public function canHoldFile(\Brick\Math\BigInteger|string|int $size): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canHoldFile', [$size]);

        return parent::canHoldFile($size);
    }

    /**
     * {@inheritDoc}
     */
    public function errorIfFull(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'errorIfFull', []);

        parent::errorIfFull();
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageUsePercentage(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageUsePercentage', []);

        return parent::getStorageUsePercentage();
    }

    /**
     * {@inheritDoc}
     */
    public function getMedia(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedia', []);

        return parent::getMedia();
    }

    /**
     * {@inheritDoc}
     */
    public function getUri(string $suffix = NULL): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUri', [$suffix]);

        return parent::getUri($suffix);
    }

    /**
     * {@inheritDoc}
     */
    public function validate(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validate', []);

        parent::validate();
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageAdapter(): \Azura\Files\Adapter\ExtendedAdapterInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageAdapter', []);

        return parent::getStorageAdapter();
    }

    /**
     * {@inheritDoc}
     */
    public function getFilesystem(): \Azura\Files\ExtendedFilesystemInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFilesystem', []);

        return parent::getFilesystem();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdRequired(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdRequired', []);

        return parent::getIdRequired();
    }

}
